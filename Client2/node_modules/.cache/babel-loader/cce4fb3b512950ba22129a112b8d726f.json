{"ast":null,"code":"import _objectSpread from \"D:\\\\gocBaitap\\\\ETan\\\\ICTUedu\\\\Client2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"D:\\\\gocBaitap\\\\ETan\\\\ICTUedu\\\\Client2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\gocBaitap\\\\ETan\\\\ICTUedu\\\\Client2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"D:\\\\gocBaitap\\\\ETan\\\\ICTUedu\\\\Client2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:\\\\gocBaitap\\\\ETan\\\\ICTUedu\\\\Client2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"D:\\\\gocBaitap\\\\ETan\\\\ICTUedu\\\\Client2\\\\src\\\\app\\\\views\\\\User\\\\UserEditorDialog.jsx\";\nimport React, { Component } from 'react';\nimport { Dialog, Button, Grid, IconButton, Icon, InputLabel, FormControl, MenuItem, Select, Checkbox, TextField, FormControlLabel, DialogActions } from '@material-ui/core';\nimport { useTranslation, withTranslation, Trans } from 'react-i18next';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport MaterialTable, { MTableToolbar, Chip, MTableBody, MTableHeader } from 'material-table';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { getUserByUsername, saveUser, saveUserDepartment, addNewUser, getAllRoles, saveUserDepartments, listByUserId, deleteById } from './UserService';\nimport SelectDepartmentPopup from '../Component/Department/SelectDepartmentPopup';\nimport { find } from 'lodash';\n\nfunction MaterialButton(props) {\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t,\n      i18n = _useTranslation.i18n;\n\n  var item = props.item;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    onClick: function onClick() {\n      return props.onSelect(item, 1);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    color: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, \"delete\")));\n}\n\nvar UserEditorDialog = /*#__PURE__*/function (_Component) {\n  _inherits(UserEditorDialog, _Component);\n\n  var _super = _createSuper(UserEditorDialog);\n\n  function UserEditorDialog(props) {\n    var _this;\n\n    _classCallCheck(this, UserEditorDialog);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      userDepartmentId: '',\n      department: {},\n      isAddNew: false,\n      listRole: [],\n      roles: [],\n      active: true,\n      email: '',\n      person: {},\n      username: '',\n      changePass: true,\n      password: '',\n      confirmPassword: '',\n      userDepartments: [],\n      id: ''\n    };\n    _this.listGender = [{\n      id: 'M',\n      name: 'Nam'\n    }, {\n      id: 'F',\n      name: 'Nữ'\n    }, {\n      id: 'U',\n      name: 'Không rõ'\n    }];\n\n    _this.handleChange = function (event, source) {\n      event.persist();\n\n      if (source === 'switch') {\n        _this.setState({\n          isActive: event.target.checked\n        });\n\n        return;\n      }\n\n      if (source === 'changePass') {\n        _this.setState({\n          changePass: event.target.checked\n        });\n\n        return;\n      }\n\n      if (source === 'active') {\n        _this.setState({\n          active: event.target.checked\n        });\n\n        return;\n      }\n\n      if (source === 'displayName') {\n        var person = _this.state.person;\n        person = person ? person : {};\n        person.displayName = event.target.value;\n\n        _this.setState({\n          person: person\n        });\n\n        return;\n      }\n\n      if (source === 'gender') {\n        var _person = _this.state.person;\n        _person = _person ? _person : {};\n        _person.gender = event.target.value;\n\n        _this.setState({\n          person: _person\n        });\n\n        return;\n      }\n\n      _this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    _this.openSelectDepartmentPopup = function () {\n      _this.setState({\n        shouldOpenSelectDepartmentPopup: true\n      });\n    };\n\n    _this.handleSelectDepartmentPopupClose = function () {\n      _this.setState({\n        openSelectDepartmentPopup: false\n      });\n    };\n\n    _this.handleSelectUseDepartment = function (item) {\n      var userDepartments = _this.state.userDepartments;\n      var department = {\n        id: item.id,\n        name: item.text,\n        text: item.text\n      };\n\n      if (userDepartments.map(function (el) {\n        return el.department.id;\n      }).indexOf(item.id) < 0) {\n        userDepartments.push({\n          department,\n          isMainDepartment: false\n        });\n      }\n\n      _this.setState({\n        userDepartments\n      }); // this.setState({ department }, function () {\n      // });\n\n\n      _this.handleSelectDepartmentPopupClose();\n    };\n\n    _this.handleFormSubmit = function () {\n      var _this$state = _this.state,\n          id = _this$state.id,\n          userDepartments = _this$state.userDepartments,\n          email = _this$state.email;\n      getUserByUsername(_this.state.username).then(function (_ref) {\n        var data = _ref.data;\n\n        if (data && data.id) {\n          if (!id || id && data.id != id) {\n            alert('Tên đăng nhập đã tồn tại!');\n            return;\n          }\n        }\n\n        getUserByUsername(_this.state.username).then(function (_ref2) {\n          var data2 = _ref2.data2;\n\n          if (data2 && data2.id) {\n            alert('Địa chỉ email đã tồn tại!');\n            return;\n          }\n        });\n        saveUser(_objectSpread({}, _this.state)).then(function (user) {\n          if (user.data != null && user.data.id != null) {\n            var userDepartment = {};\n            userDepartment.id = _this.state.userDepartmentId;\n            userDepartment.user = user.data;\n            userDepartment.department = _this.state.department;\n            userDepartment.isMainDepartment = true; // saveUserDepartment(userDepartment).then(() => {\n            //   this.props.handleOKEditClose();\n            // });\n\n            saveUserDepartments(userDepartments.map(function (element) {\n              return {\n                id: element.id,\n                user: {\n                  id: user.data.id\n                },\n                department: element.department,\n                isMainDepartment: element.isMainDepartment\n              };\n            }));\n          }\n\n          _this.props.handleOKEditClose();\n        });\n      });\n    };\n\n    _this.selectRoles = function (rolesSelected) {\n      _this.setState({\n        roles: rolesSelected\n      }, function () {});\n    };\n\n    return _this;\n  }\n\n  _createClass(UserEditorDialog, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          open = _this$props.open,\n          handleClose = _this$props.handleClose,\n          item = _this$props.item,\n          department = _this$props.department,\n          userDepartmentId = _this$props.userDepartmentId;\n      this.setState(item);\n      this.setState({\n        department,\n        userDepartmentId\n      });\n\n      if (item && item.id) {\n        listByUserId(item.id).then(function (_ref3) {\n          var data = _ref3.data;\n\n          _this2.setState({\n            userDepartments: data\n          });\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      // custom rule will have name 'isPasswordMatch'\n      ValidatorForm.addValidationRule('isPasswordMatch', function (value) {\n        if (value !== _this3.state.password) {\n          return false;\n        }\n\n        return true;\n      });\n      getAllRoles().then(function (_ref4) {\n        var data = _ref4.data;\n\n        _this3.setState({\n          listRole: data\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var _this$props2 = this.props,\n          open = _this$props2.open,\n          handleClose = _this$props2.handleClose,\n          handleOKEditClose = _this$props2.handleOKEditClose,\n          t = _this$props2.t,\n          i18n = _this$props2.i18n;\n      var _this$state2 = this.state,\n          id = _this$state2.id,\n          isAddNew = _this$state2.isAddNew,\n          listRole = _this$state2.listRole,\n          roles = _this$state2.roles,\n          active = _this$state2.active,\n          email = _this$state2.email,\n          person = _this$state2.person,\n          username = _this$state2.username,\n          changePass = _this$state2.changePass,\n          password = _this$state2.password,\n          confirmPassword = _this$state2.confirmPassword,\n          openSelectDepartmentPopup = _this$state2.openSelectDepartmentPopup,\n          department = _this$state2.department,\n          userDepartments = _this$state2.userDepartments;\n      var columnsUserDepartment = [{\n        title: t('manage.isMainDepartment'),\n        field: 'custom',\n        width: '150',\n        align: 'center',\n        render: function render(rowData) {\n          return /*#__PURE__*/React.createElement(Checkbox, {\n            checked: rowData.isMainDepartment,\n            onChange: function onChange(event, checked) {\n              if (checked == true) {\n                userDepartments.forEach(function (el) {\n                  return el.isMainDepartment = false;\n                });\n                var finder = userDepartments.find(function (el) {\n                  return el.department && el.department.id === rowData.department.id;\n                });\n\n                if (finder) {\n                  finder.isMainDepartment = true;\n\n                  _this4.setState({\n                    userDepartments\n                  });\n                }\n              }\n            },\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 11\n            }\n          });\n        }\n      }, {\n        title: t('manage.department'),\n        field: 'department.name',\n        width: '150'\n      }, {\n        title: t('Action'),\n        field: 'custom',\n        align: 'left',\n        width: '250',\n        render: function render(rowData) {\n          return /*#__PURE__*/React.createElement(MaterialButton, {\n            item: rowData,\n            onSelect: function onSelect(rowData, method) {\n              if (method === 0) {} else if (method === 1) {\n                for (var index = 0; index < userDepartments.length; index++) {\n                  var item = userDepartments[index];\n\n                  if (rowData.department && item.department && rowData.department.id === item.department.id) {\n                    if (rowData.id) {\n                      deleteById(rowData.id).then(function (_ref5) {\n                        var data = _ref5.data;\n                      });\n                    }\n\n                    userDepartments.splice(index, 1);\n\n                    _this4.setState({\n                      userDepartments\n                    });\n\n                    break;\n                  }\n                }\n              } else {\n                alert('Call Selected Here:' + rowData.id);\n              }\n            },\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 11\n            }\n          });\n        }\n      }];\n      return /*#__PURE__*/React.createElement(Dialog, {\n        onClose: handleClose,\n        open: open,\n        maxWidth: 'md',\n        fullWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-24\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        className: \"mb-20\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }\n      }, t('general.saveUpdate')), /*#__PURE__*/React.createElement(ValidatorForm, {\n        ref: \"form\",\n        onSubmit: this.handleFormSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        className: \"mb-16\",\n        container: true,\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 mb-16\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 26\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 32\n          }\n        }, \"*\"), t('user.displayName')),\n        onChange: function onChange(displayName) {\n          return _this4.handleChange(displayName, 'displayName');\n        },\n        type: \"text\",\n        name: \"name\",\n        value: person ? person.displayName : '',\n        validators: ['required'],\n        errorMessages: ['this field is required'],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        fullWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"gender-simple\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 19\n        }\n      }, t('user.gender')), /*#__PURE__*/React.createElement(Select, {\n        value: person ? person.gender : '',\n        onChange: function onChange(gender) {\n          return _this4.handleChange(gender, 'gender');\n        },\n        inputProps: {\n          name: 'gender',\n          id: 'gender-simple'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 19\n        }\n      }, this.listGender.map(function (item) {\n        return /*#__PURE__*/React.createElement(MenuItem, {\n          key: item.id,\n          value: item.id,\n          __self: _this4,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 25\n          }\n        }, item.name);\n      })))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        InputProps: {\n          readOnly: !isAddNew\n        },\n        className: \"w-100 mb-16\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 26\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 32\n          }\n        }, \"*\"), t('user.username')) // label={t('user.username')}\n        ,\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"username\",\n        value: username,\n        validators: ['required'],\n        errorMessages: ['this field is required'],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 mb-16\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 26\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 32\n          }\n        }, \"*\"), t('user.email')),\n        onChange: this.handleChange,\n        type: \"email\",\n        name: \"email\",\n        value: email,\n        validators: ['required', 'isEmail'],\n        errorMessages: ['This field is required', 'Email is not valid'],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 15\n        }\n      }, listRole && /*#__PURE__*/React.createElement(Autocomplete, {\n        style: {\n          width: '100%'\n        },\n        multiple: true,\n        id: \"combo-box-demo\",\n        defaultValue: roles,\n        options: listRole,\n        getOptionSelected: function getOptionSelected(option, value) {\n          return option.id === value.id;\n        },\n        getOptionLabel: function getOptionLabel(option) {\n          return option.authority;\n        },\n        onChange: function onChange(event, value) {\n          _this4.selectRoles(value);\n        },\n        renderInput: function renderInput(params) {\n          return /*#__PURE__*/React.createElement(TextValidator, Object.assign({}, params, {\n            value: roles // label={t('user.role')}\n            ,\n            label: /*#__PURE__*/React.createElement(\"span\", {\n              __self: _this4,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 392,\n                columnNumber: 32\n              }\n            }, /*#__PURE__*/React.createElement(\"span\", {\n              style: {\n                color: \"red\"\n              },\n              __self: _this4,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 392,\n                columnNumber: 38\n              }\n            }, \"*\"), t('user.role')),\n            fullWidth: true,\n            validators: ['required'],\n            errorMessages: [t('user.please_select_permission')],\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 23\n            }\n          }));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 19\n        }\n      })), !isAddNew && /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(FormControlLabel, {\n        value: changePass,\n        className: \"mb-16\",\n        name: \"changePass\",\n        onChange: function onChange(changePass) {\n          return _this4.handleChange(changePass, 'changePass');\n        },\n        control: /*#__PURE__*/React.createElement(Checkbox, {\n          checked: changePass,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 30\n          }\n        }),\n        label: t('user.changePass'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(FormControlLabel, {\n        value: active,\n        className: \"mb-16\",\n        name: \"active\",\n        onChange: function onChange(active) {\n          return _this4.handleChange(active, 'active');\n        },\n        control: /*#__PURE__*/React.createElement(Checkbox, {\n          checked: active,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 28\n          }\n        }),\n        label: t('user.active'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 17\n        }\n      })), changePass != null && changePass == true ? /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"mb-16 w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 30\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 36\n          }\n        }, \"*\"), t('user.pass')) // label={t('password')}\n        ,\n        variant: \"outlined\",\n        onChange: this.handleChange,\n        name: \"password\",\n        type: \"password\",\n        value: password,\n        validators: ['required'],\n        errorMessages: ['This field is required'],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        sm: 6,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"mb-16 w-100\",\n        label: /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 30\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 36\n          }\n        }, \"*\"), t('user.re_pass')) // label={t('re_password')}\n        ,\n        variant: \"outlined\",\n        onChange: this.handleChange,\n        name: \"confirmPassword\",\n        type: \"password\",\n        value: confirmPassword,\n        validators: ['required', 'isPasswordMatch'],\n        errorMessages: ['This field is required', 'Password mismatch'],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 21\n        }\n      }))) : /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        md: 6,\n        sm: 6,\n        xs: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \" mt-10\",\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: function onClick() {\n          return _this4.setState({\n            openSelectDepartmentPopup: true,\n            item: {}\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 17\n        }\n      }, t('general.select')), openSelectDepartmentPopup && /*#__PURE__*/React.createElement(SelectDepartmentPopup, {\n        open: openSelectDepartmentPopup,\n        handleSelect: this.handleSelectUseDepartment,\n        selectedItem: department != null ? department : {},\n        handleClose: this.handleSelectDepartmentPopupClose,\n        t: t,\n        i18n: i18n,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        sm: 12,\n        xs: \"12\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(MaterialTable, {\n        title: t('manage.departmentList'),\n        data: userDepartments,\n        columns: columnsUserDepartment,\n        options: {\n          selection: false,\n          actionsColumnIndex: 0,\n          paging: false,\n          search: false\n        },\n        components: {\n          Toolbar: function Toolbar(props) {\n            return /*#__PURE__*/React.createElement(MTableToolbar, Object.assign({}, props, {\n              __self: _this4,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 508,\n                columnNumber: 41\n              }\n            }));\n          }\n        },\n        onSelectionChange: function onSelectionChange(rows) {\n          _this4.data = rows;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 17\n        }\n      }))), /*#__PURE__*/React.createElement(DialogActions, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"flex flex-space-between flex-middle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        className: \"mr-36\",\n        onClick: function onClick() {\n          return _this4.props.handleClose();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 17\n        }\n      }, t('general.cancel')), /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 17\n        }\n      }, t('general.save')))))));\n    }\n  }]);\n\n  return UserEditorDialog;\n}(Component);\n\nexport default UserEditorDialog;","map":{"version":3,"sources":["D:/gocBaitap/ETan/ICTUedu/Client2/src/app/views/User/UserEditorDialog.jsx"],"names":["React","Component","Dialog","Button","Grid","IconButton","Icon","InputLabel","FormControl","MenuItem","Select","Checkbox","TextField","FormControlLabel","DialogActions","useTranslation","withTranslation","Trans","Autocomplete","MaterialTable","MTableToolbar","Chip","MTableBody","MTableHeader","ValidatorForm","TextValidator","getUserByUsername","saveUser","saveUserDepartment","addNewUser","getAllRoles","saveUserDepartments","listByUserId","deleteById","SelectDepartmentPopup","find","MaterialButton","props","t","i18n","item","onSelect","UserEditorDialog","state","userDepartmentId","department","isAddNew","listRole","roles","active","email","person","username","changePass","password","confirmPassword","userDepartments","id","listGender","name","handleChange","event","source","persist","setState","isActive","target","checked","displayName","value","gender","openSelectDepartmentPopup","shouldOpenSelectDepartmentPopup","handleSelectDepartmentPopupClose","handleSelectUseDepartment","text","map","el","indexOf","push","isMainDepartment","handleFormSubmit","then","data","alert","data2","user","userDepartment","element","handleOKEditClose","selectRoles","rolesSelected","open","handleClose","addValidationRule","columnsUserDepartment","title","field","width","align","render","rowData","forEach","finder","method","index","length","splice","color","readOnly","option","authority","params","selection","actionsColumnIndex","paging","search","Toolbar","rows"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport {\r\n  Dialog,\r\n  Button,\r\n  Grid,\r\n  IconButton,\r\n  Icon,\r\n  InputLabel,\r\n  FormControl,\r\n  MenuItem,\r\n  Select,\r\n  Checkbox,\r\n  TextField,\r\n  FormControlLabel,\r\n  DialogActions,\r\n} from '@material-ui/core'\r\nimport { useTranslation, withTranslation, Trans } from 'react-i18next'\r\nimport Autocomplete from '@material-ui/lab/Autocomplete'\r\nimport MaterialTable, {\r\n  MTableToolbar,\r\n  Chip,\r\n  MTableBody,\r\n  MTableHeader,\r\n} from 'material-table'\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator'\r\nimport {\r\n  getUserByUsername,\r\n  saveUser,\r\n  saveUserDepartment,\r\n  addNewUser,\r\n  getAllRoles,\r\n  saveUserDepartments,\r\n  listByUserId,\r\n  deleteById,\r\n} from './UserService'\r\nimport SelectDepartmentPopup from '../Component/Department/SelectDepartmentPopup'\r\nimport { find } from 'lodash'\r\nfunction MaterialButton(props) {\r\n  const { t, i18n } = useTranslation()\r\n  const item = props.item\r\n  return (\r\n    <div>\r\n      {/* <IconButton onClick={() => props.onSelect(item, 0)}>\r\n      <Icon color=\"primary\">edit</Icon>\r\n    </IconButton> */}\r\n      <IconButton onClick={() => props.onSelect(item, 1)}>\r\n        <Icon color=\"error\">delete</Icon>\r\n      </IconButton>\r\n    </div>\r\n  )\r\n}\r\nclass UserEditorDialog extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n  state = {\r\n    userDepartmentId: '',\r\n    department: {},\r\n    isAddNew: false,\r\n    listRole: [],\r\n    roles: [],\r\n    active: true,\r\n    email: '',\r\n    person: {},\r\n    username: '',\r\n    changePass: true,\r\n    password: '',\r\n    confirmPassword: '',\r\n    userDepartments: [],\r\n    id: '',\r\n  }\r\n\r\n  listGender = [\r\n    { id: 'M', name: 'Nam' },\r\n    { id: 'F', name: 'Nữ' },\r\n    { id: 'U', name: 'Không rõ' },\r\n  ]\r\n\r\n  handleChange = (event, source) => {\r\n    event.persist()\r\n    if (source === 'switch') {\r\n      this.setState({ isActive: event.target.checked })\r\n      return\r\n    }\r\n    if (source === 'changePass') {\r\n      this.setState({ changePass: event.target.checked })\r\n      return\r\n    }\r\n    if (source === 'active') {\r\n      this.setState({ active: event.target.checked })\r\n      return\r\n    }\r\n    if (source === 'displayName') {\r\n      let { person } = this.state\r\n      person = person ? person : {}\r\n      person.displayName = event.target.value\r\n      this.setState({ person: person })\r\n      return\r\n    }\r\n    if (source === 'gender') {\r\n      let { person } = this.state\r\n      person = person ? person : {}\r\n      person.gender = event.target.value\r\n      this.setState({ person: person })\r\n      return\r\n    }\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    })\r\n  }\r\n  openSelectDepartmentPopup = () => {\r\n    this.setState({\r\n      shouldOpenSelectDepartmentPopup: true,\r\n    })\r\n  }\r\n  handleSelectDepartmentPopupClose = () => {\r\n    this.setState({\r\n      openSelectDepartmentPopup: false,\r\n    })\r\n  }\r\n  handleSelectUseDepartment = (item) => {\r\n    let { userDepartments } = this.state\r\n    let department = { id: item.id, name: item.text, text: item.text }\r\n    if (userDepartments.map((el) => el.department.id).indexOf(item.id) < 0) {\r\n      userDepartments.push({ department, isMainDepartment: false })\r\n    }\r\n    this.setState({ userDepartments })\r\n    // this.setState({ department }, function () {\r\n    // });\r\n    this.handleSelectDepartmentPopupClose()\r\n  }\r\n  handleFormSubmit = () => {\r\n    let { id, userDepartments, email } = this.state\r\n\r\n    getUserByUsername(this.state.username).then(({ data }) => {\r\n      if (data && data.id) {\r\n        if (!id || (id && data.id != id)) {\r\n          alert('Tên đăng nhập đã tồn tại!')\r\n          return\r\n        }\r\n      }\r\n\r\n      getUserByUsername(this.state.username).then(({ data2 }) => {\r\n        if (data2 && data2.id) {\r\n          alert('Địa chỉ email đã tồn tại!')\r\n          return\r\n        }\r\n      })\r\n      saveUser({\r\n        ...this.state,\r\n      }).then((user) => {\r\n        if (user.data != null && user.data.id != null) {\r\n          let userDepartment = {}\r\n          userDepartment.id = this.state.userDepartmentId\r\n          userDepartment.user = user.data\r\n          userDepartment.department = this.state.department\r\n          userDepartment.isMainDepartment = true\r\n          // saveUserDepartment(userDepartment).then(() => {\r\n          //   this.props.handleOKEditClose();\r\n          // });\r\n\r\n          saveUserDepartments(\r\n            userDepartments.map((element) => {\r\n              return {\r\n                id: element.id,\r\n                user: { id: user.data.id },\r\n                department: element.department,\r\n                isMainDepartment: element.isMainDepartment,\r\n              }\r\n            })\r\n          )\r\n        }\r\n        this.props.handleOKEditClose()\r\n      })\r\n    })\r\n  }\r\n\r\n  selectRoles = (rolesSelected) => {\r\n    this.setState({ roles: rolesSelected }, function () {})\r\n  }\r\n\r\n  componentWillMount() {\r\n    let { open, handleClose, item, department, userDepartmentId } = this.props\r\n    this.setState(item)\r\n    this.setState({ department, userDepartmentId })\r\n    if (item && item.id) {\r\n      listByUserId(item.id).then(({ data }) => {\r\n        this.setState({ userDepartments: data })\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    // custom rule will have name 'isPasswordMatch'\r\n    ValidatorForm.addValidationRule('isPasswordMatch', (value) => {\r\n      if (value !== this.state.password) {\r\n        return false\r\n      }\r\n      return true\r\n    })\r\n\r\n    getAllRoles().then(({ data }) => {\r\n      this.setState({\r\n        listRole: data,\r\n      })\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let { open, handleClose, handleOKEditClose, t, i18n } = this.props\r\n    let {\r\n      id,\r\n      isAddNew,\r\n      listRole,\r\n      roles,\r\n      active,\r\n      email,\r\n      person,\r\n      username,\r\n      changePass,\r\n      password,\r\n      confirmPassword,\r\n      openSelectDepartmentPopup,\r\n      department,\r\n      userDepartments,\r\n    } = this.state\r\n\r\n    let columnsUserDepartment = [\r\n      {\r\n        title: t('manage.isMainDepartment'),\r\n        field: 'custom',\r\n        width: '150',\r\n        align: 'center',\r\n        render: (rowData) => (\r\n          <Checkbox\r\n            checked={rowData.isMainDepartment}\r\n            onChange={(event, checked) => {\r\n              if (checked == true) {\r\n                userDepartments.forEach((el) => (el.isMainDepartment = false))\r\n                const finder = userDepartments.find(\r\n                  (el) =>\r\n                    el.department && el.department.id === rowData.department.id\r\n                )\r\n                if (finder) {\r\n                  finder.isMainDepartment = true\r\n                  this.setState({ userDepartments })\r\n                }\r\n              }\r\n            }}\r\n          />\r\n        ),\r\n      },\r\n      { title: t('manage.department'), field: 'department.name', width: '150' },\r\n      {\r\n        title: t('Action'),\r\n        field: 'custom',\r\n        align: 'left',\r\n        width: '250',\r\n        render: (rowData) => (\r\n          <MaterialButton\r\n            item={rowData}\r\n            onSelect={(rowData, method) => {\r\n              if (method === 0) {\r\n              } else if (method === 1) {\r\n                for (let index = 0; index < userDepartments.length; index++) {\r\n                  const item = userDepartments[index]\r\n                  if (\r\n                    rowData.department &&\r\n                    item.department &&\r\n                    rowData.department.id === item.department.id\r\n                  ) {\r\n                    if (rowData.id) {\r\n                      deleteById(rowData.id).then(({ data }) => {\r\n                      })\r\n                    }\r\n                    userDepartments.splice(index, 1)\r\n                    this.setState({ userDepartments })\r\n                    break\r\n                  }\r\n                }\r\n              } else {\r\n                alert('Call Selected Here:' + rowData.id)\r\n              }\r\n            }}\r\n          />\r\n        ),\r\n      },\r\n    ]\r\n\r\n    return (\r\n      <Dialog\r\n        onClose={handleClose}\r\n        open={open}\r\n        maxWidth={'md'}\r\n        fullWidth={true}\r\n      >\r\n        <div className=\"p-24\">\r\n          <h4 className=\"mb-20\">{t('general.saveUpdate')}</h4>\r\n          <ValidatorForm ref=\"form\" onSubmit={this.handleFormSubmit}>\r\n            <Grid className=\"mb-16\" container spacing={2}>\r\n              <Grid item sm={6} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 mb-16\"\r\n                 \r\n                  label={<span><span style={{color:\"red\"}}>*</span>{t('user.displayName')}</span>}\r\n                  onChange={(displayName) =>\r\n                    this.handleChange(displayName, 'displayName')\r\n                  }\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  value={person ? person.displayName : ''}\r\n                  validators={['required']}\r\n                  errorMessages={['this field is required']}\r\n                />\r\n              </Grid>\r\n              <Grid item sm={6} xs={12}>\r\n                <FormControl fullWidth={true}>\r\n                  <InputLabel htmlFor=\"gender-simple\">\r\n                    {t('user.gender')}\r\n                  </InputLabel>\r\n                  <Select\r\n                    value={person ? person.gender : ''}\r\n                    onChange={(gender) => this.handleChange(gender, 'gender')}\r\n                    inputProps={{\r\n                      name: 'gender',\r\n                      id: 'gender-simple',\r\n                    }}\r\n                  >\r\n                    {this.listGender.map((item) => {\r\n                      return (\r\n                        <MenuItem key={item.id} value={item.id}>\r\n                          {item.name}\r\n                        </MenuItem>\r\n                      )\r\n                    })}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item sm={6} xs={12}>\r\n                <TextValidator\r\n                  InputProps={{\r\n                    readOnly: !isAddNew,\r\n                  }}\r\n                  className=\"w-100 mb-16\"\r\n                  label={<span><span style={{color:\"red\"}}>*</span>{t('user.username')}</span>}\r\n                  \r\n                  // label={t('user.username')}\r\n                  onChange={this.handleChange}\r\n                  type=\"text\"\r\n                  name=\"username\"\r\n                  value={username}\r\n                  validators={['required']}\r\n                  errorMessages={['this field is required']}\r\n                />\r\n              </Grid>\r\n              <Grid item sm={6} xs={12}>\r\n                <TextValidator\r\n                  className=\"w-100 mb-16\"\r\n                  label={<span><span style={{color:\"red\"}}>*</span>{t('user.email')}</span>}\r\n                  \r\n                  onChange={this.handleChange}\r\n                  type=\"email\"\r\n                  name=\"email\"\r\n                  value={email}\r\n                  validators={['required', 'isEmail']}\r\n                  errorMessages={[\r\n                    'This field is required',\r\n                    'Email is not valid',\r\n                  ]}\r\n                />\r\n              </Grid>\r\n              <Grid item sm={12} xs={12}>\r\n                {listRole && (\r\n                  <Autocomplete\r\n                    style={{ width: '100%' }}\r\n                    multiple\r\n                    id=\"combo-box-demo\"\r\n                    defaultValue={roles}\r\n                    options={listRole}\r\n                    getOptionSelected={(option, value) =>\r\n                      option.id === value.id\r\n                    }\r\n                    getOptionLabel={(option) => option.authority}\r\n                    onChange={(event, value) => {\r\n                      this.selectRoles(value)\r\n                    }}\r\n                    renderInput={(params) => (\r\n                      <TextValidator\r\n                        {...params}\r\n                        value={roles}\r\n                        // label={t('user.role')}\r\n                        label={<span><span style={{color:\"red\"}}>*</span>{t('user.role')}</span>}\r\n                        \r\n                        fullWidth\r\n                        validators={['required']}\r\n                        errorMessages={[t('user.please_select_permission')]}\r\n                      />\r\n                    )}\r\n                  />\r\n                )}\r\n              </Grid>\r\n              {!isAddNew && (\r\n                <Grid item sm={6} xs={12}>\r\n                  <FormControlLabel\r\n                    value={changePass}\r\n                    className=\"mb-16\"\r\n                    name=\"changePass\"\r\n                    onChange={(changePass) =>\r\n                      this.handleChange(changePass, 'changePass')\r\n                    }\r\n                    control={<Checkbox checked={changePass} />}\r\n                    label={t('user.changePass')}\r\n                  />\r\n                </Grid>\r\n              )}\r\n              <Grid item sm={6} xs={12}>\r\n                <FormControlLabel\r\n                  value={active}\r\n                  className=\"mb-16\"\r\n                  name=\"active\"\r\n                  onChange={(active) => this.handleChange(active, 'active')}\r\n                  control={<Checkbox checked={active} />}\r\n                  label={t('user.active')}\r\n                />\r\n              </Grid>\r\n              {changePass != null && changePass == true ? (\r\n                <Grid container spacing={2}>\r\n                  <Grid item sm={6} xs={12}>\r\n                    <TextValidator\r\n                      className=\"mb-16 w-100\"\r\n                      label={<span><span style={{color:\"red\"}}>*</span>{t('user.pass')}</span>}\r\n\r\n                      // label={t('password')}\r\n                      variant=\"outlined\"\r\n                      onChange={this.handleChange}\r\n                      name=\"password\"\r\n                      type=\"password\"\r\n                      value={password}\r\n                      validators={['required']}\r\n                      errorMessages={['This field is required']}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item sm={6} xs={12}>\r\n                    <TextValidator\r\n                      className=\"mb-16 w-100\"\r\n                      label={<span><span style={{color:\"red\"}}>*</span>{t('user.re_pass')}</span>}\r\n\r\n                      // label={t('re_password')}\r\n                      variant=\"outlined\"\r\n                      onChange={this.handleChange}\r\n                      name=\"confirmPassword\"\r\n                      type=\"password\"\r\n                      value={confirmPassword}\r\n                      validators={['required', 'isPasswordMatch']}\r\n                      errorMessages={[\r\n                        'This field is required',\r\n                        'Password mismatch',\r\n                      ]}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              ) : (\r\n                <div></div>\r\n              )}\r\n\r\n              <Grid item md={6} sm={6} xs={6}>\r\n                {/* <TextValidator\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                  }}\r\n                  label={t(\"user.department\")}\r\n                  className=\"w-80  mr-16\"\r\n                  value={department != null ? department.name : ''}\r\n                /> */}\r\n                <Button\r\n                  className=\" mt-10\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={() =>\r\n                    this.setState({ openSelectDepartmentPopup: true, item: {} })\r\n                  }\r\n                >\r\n                  {t('general.select')}\r\n                </Button>\r\n                {openSelectDepartmentPopup && (\r\n                  <SelectDepartmentPopup\r\n                    open={openSelectDepartmentPopup}\r\n                    handleSelect={this.handleSelectUseDepartment}\r\n                    selectedItem={department != null ? department : {}}\r\n                    handleClose={this.handleSelectDepartmentPopupClose}\r\n                    t={t}\r\n                    i18n={i18n}\r\n                  />\r\n                )}\r\n              </Grid>\r\n              <Grid item sm={12} xs=\"12\">\r\n                <MaterialTable\r\n                  title={t('manage.departmentList')}\r\n                  data={userDepartments}\r\n                  columns={columnsUserDepartment}\r\n                  options={{\r\n                    selection: false,\r\n                    actionsColumnIndex: 0,\r\n                    paging: false,\r\n                    search: false,\r\n                  }}\r\n                  components={{\r\n                    Toolbar: (props) => <MTableToolbar {...props} />,\r\n                  }}\r\n                  onSelectionChange={(rows) => {\r\n                    this.data = rows\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <DialogActions>\r\n              <div className=\"flex flex-space-between flex-middle\">\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                  className=\"mr-36\"\r\n                  onClick={() => this.props.handleClose()}\r\n                >\r\n                  {t('general.cancel')}\r\n                </Button>\r\n                <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                  {t('general.save')}\r\n                </Button>\r\n              </div>\r\n            </DialogActions>\r\n          </ValidatorForm>\r\n        </div>\r\n      </Dialog>\r\n    )\r\n  }\r\n}\r\n\r\nexport default UserEditorDialog\r\n"]},"metadata":{},"sourceType":"module"}