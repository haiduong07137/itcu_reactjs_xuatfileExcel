{"ast":null,"code":"import _objectSpread from \"D:\\\\gocBaitap\\\\ETan\\\\ICTUedu\\\\Client2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"D:\\\\gocBaitap\\\\ETan\\\\ICTUedu\\\\Client2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\gocBaitap\\\\ETan\\\\ICTUedu\\\\Client2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"D:\\\\gocBaitap\\\\ETan\\\\ICTUedu\\\\Client2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:\\\\gocBaitap\\\\ETan\\\\ICTUedu\\\\Client2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"D:\\\\gocBaitap\\\\ETan\\\\ICTUedu\\\\Client2\\\\src\\\\app\\\\views\\\\AdministrativeUnit\\\\AdministrativeUnitEditorDialog.jsx\";\nimport React, { Component } from \"react\";\nimport { Dialog, Button, Grid, FormControlLabel, Switch } from \"@material-ui/core\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { getUserById, updateUser, addNewAdministrativeUnit, updateAdministrativeUnit } from \"./AdministrativeUnitService\";\nimport { generateRandomId } from \"utils\";\n\nvar AdministrativeUnitEditorDialog = /*#__PURE__*/function (_Component) {\n  _inherits(AdministrativeUnitEditorDialog, _Component);\n\n  var _super = _createSuper(AdministrativeUnitEditorDialog);\n\n  function AdministrativeUnitEditorDialog() {\n    var _this;\n\n    _classCallCheck(this, AdministrativeUnitEditorDialog);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      name: \"\",\n      code: \"\",\n      level: 0,\n      isActive: false\n    };\n\n    _this.handleChange = function (event, source) {\n      event.persist();\n\n      if (source === \"switch\") {\n        _this.setState({\n          isActive: event.target.checked\n        });\n\n        return;\n      }\n\n      _this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    _this.handleFormSubmit = function () {\n      var id = _this.state.id;\n\n      if (id) {\n        updateAdministrativeUnit(_objectSpread({}, _this.state)).then(function () {\n          _this.props.handleClose();\n        });\n      } else {\n        addNewAdministrativeUnit(_objectSpread({}, _this.state)).then(function () {\n          _this.props.handleClose();\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(AdministrativeUnitEditorDialog, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      //getUserById(this.props.uid).then(data => this.setState({ ...data.data }));\n      var _this$props = this.props,\n          open = _this$props.open,\n          handleClose = _this$props.handleClose,\n          item = _this$props.item;\n      this.setState(item);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          open = _this$props2.open,\n          handleClose = _this$props2.handleClose,\n          handleOKEditClose = _this$props2.handleOKEditClose,\n          t = _this$props2.t,\n          i18n = _this$props2.i18n;\n      var _this$state = this.state,\n          id = _this$state.id,\n          name = _this$state.name,\n          code = _this$state.code,\n          level = _this$state.level,\n          isActive = _this$state.isActive;\n      return /*#__PURE__*/React.createElement(Dialog, {\n        onClose: handleClose,\n        open: open,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-24\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        className: \"mb-20\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }\n      }, t('SaveUpdate')), /*#__PURE__*/React.createElement(ValidatorForm, {\n        ref: \"form\",\n        onSubmit: this.handleFormSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        className: \"mb-16\",\n        container: true,\n        spacing: 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 mb-16\",\n        label: t('Code'),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"code\",\n        value: code,\n        validators: [\"required\"],\n        errorMessages: [\"this field is required\"],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(TextValidator, {\n        className: \"w-100 mb-16\",\n        label: t('Name'),\n        onChange: this.handleChange,\n        type: \"text\",\n        name: \"name\",\n        value: name,\n        validators: [\"required\"],\n        errorMessages: [\"this field is required\"],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"flex flex-space-between flex-middle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }\n      }, \"Save\"), /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: function onClick() {\n          return _this2.props.handleClose();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }\n      }, \"Cancel\")))));\n    }\n  }]);\n\n  return AdministrativeUnitEditorDialog;\n}(Component);\n\nexport default AdministrativeUnitEditorDialog;","map":{"version":3,"sources":["D:/gocBaitap/ETan/ICTUedu/Client2/src/app/views/AdministrativeUnit/AdministrativeUnitEditorDialog.jsx"],"names":["React","Component","Dialog","Button","Grid","FormControlLabel","Switch","ValidatorForm","TextValidator","getUserById","updateUser","addNewAdministrativeUnit","updateAdministrativeUnit","generateRandomId","AdministrativeUnitEditorDialog","state","name","code","level","isActive","handleChange","event","source","persist","setState","target","checked","value","handleFormSubmit","id","then","props","handleClose","open","item","handleOKEditClose","t","i18n"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Dialog,\n  Button,\n  Grid,\n  FormControlLabel,\n  Switch\n} from \"@material-ui/core\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { getUserById, updateUser, addNewAdministrativeUnit,updateAdministrativeUnit } from \"./AdministrativeUnitService\";\nimport { generateRandomId } from \"utils\";\n\nclass AdministrativeUnitEditorDialog extends Component {\n  state = {\n    name: \"\",\n    code: \"\",\n    level:0,\n    isActive: false\n  };\n\n  handleChange = (event, source) => {\n    event.persist();\n    if (source === \"switch\") {\n      this.setState({ isActive: event.target.checked });\n      return;\n    }\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n  handleFormSubmit = () => {\n    let { id } = this.state;\n    if (id) {\n      updateAdministrativeUnit({\n        ...this.state\n      }).then(() => {\n        this.props.handleClose();\n      });\n    } else {\n      addNewAdministrativeUnit({\n        ...this.state\n      }).then(() => {\n        this.props.handleClose();\n      });\n    }\n  };\n\n  componentWillMount() {\n    //getUserById(this.props.uid).then(data => this.setState({ ...data.data }));\n    let { open, handleClose,item } = this.props;\n    this.setState(item);\n  }\n\n  render() {\n    let { open, handleClose, handleOKEditClose, t, i18n } = this.props;\n    let {\n      id,\n      name,\n      code,\n      level,\n      isActive\n    } = this.state;\n    return (\n      <Dialog onClose={handleClose} open={open}>\n        <div className=\"p-24\">\n          <h4 className=\"mb-20\">{t('SaveUpdate')}</h4>\n          <ValidatorForm ref=\"form\" onSubmit={this.handleFormSubmit}>\n            <Grid className=\"mb-16\" container spacing={4}>\n              <Grid item sm={12} xs={12}>\n                <TextValidator\n                  className=\"w-100 mb-16\"\n                  label={t('Code')}\n                  onChange={this.handleChange}\n                  type=\"text\"\n                  name=\"code\"\n                  value={code}\n                  validators={[\"required\"]}\n                  errorMessages={[\"this field is required\"]}\n                />\n                <TextValidator\n                  className=\"w-100 mb-16\"\n                  label={t('Name')}\n                  onChange={this.handleChange}\n                  type=\"text\"\n                  name=\"name\"\n                  value={name}\n                  validators={[\"required\"]}\n                  errorMessages={[\"this field is required\"]}\n                />\n                {/* <TextValidator\n                  className=\"w-100 mb-16\"\n                  label=\"Level\"\n                  onChange={this.handleChange}\n                  type=\"number\"\n                  name=\"level\"\n                  value={level}\n                  validators={[\"required\"]}\n                  errorMessages={[\"this field is required\"]}\n                /> */}\n              </Grid>\n              {/* <Grid>\n                <FormControlLabel\n                  className=\"my-20\"\n                  control={\n                    <Switch\n                      checked={isActive}\n                      onChange={event => this.handleChange(event, \"switch\")}\n                    />\n                  }\n                  label=\"Active Customer\"\n                />\n              </Grid> */}\n            </Grid>\n\n            <div className=\"flex flex-space-between flex-middle\">\n              <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n                Save\n              </Button>\n              <Button variant=\"contained\" color=\"secondary\" onClick={() => this.props.handleClose()}>Cancel</Button>\n            </div>\n          </ValidatorForm>\n        </div>\n      </Dialog>\n    );\n  }\n}\n\nexport default AdministrativeUnitEditorDialog;\n"]},"metadata":{},"sourceType":"module"}